#include "match.hpp"

#define ONBIT(x, i) ((x) >> (i) & 1)

///about Movement class
Movement::Movement(){}

Movement::Movement(pa _from, pa _to, int _pieceKind, bool _takePiece):
    from(_from), to(_to), pieceKind(_pieceKind), takePiece(_takePiece) {}

///about Match class
Match::Match(){
    dot1 = Texture("img/dot1.png"); dot1.setAlpha(0x78);
    dot2 = Texture("img/dot2.png"); dot2.setAlpha(0x78);
    FU(i, 0, 8) FU(j, 0, 8)
        square[i][j] = SDL_Rect{XOFF + j * PIECE_SIZE , YOFF + i * PIECE_SIZE,
                                PIECE_SIZE, PIECE_SIZE};
    init();
}

Match::~Match(){}

void Match::init(){
    quit = hold_piece = false;
    currentSide = BLACK;
    numMove = numTurn = 0;
    board.initValue();
    FU(i, 0, 8) FU(j, 0, 8)
        piece[i][j].setPos(i, j);
    dMove.clear();
    draw();
    calculate();
}

bool inside_board(int x, int y){
    return 0<=x && x<8 && 0<=y && y<8;
}

void Match::mainEvent(){
    add_numMove();
    while(!quit){
        move();
        if(quit) break;
        draw();
    }
}

//detail of the move
void Match::move(){
    SDL_Event e;
    while( SDL_PollEvent( &e ) != 0 ) {
        if( e.type == SDL_QUIT ){ quit = true; return;}
        if( e.type == SDL_MOUSEBUTTONDOWN  ) {
            int y_board = (e.motion.x < XOFF ? -1 : (e.motion.x - XOFF) / 80);
            int x_board = (e.motion.y < YOFF ? -1 : (e.motion.y - YOFF) / 80);
            if (!inside_board(x_board, y_board)) continue;
            if (hold_piece == true) {
                hold_piece = false;
                if(x_board == cur.fi && y_board == cur.se){
                    cerr << "CANCELLED!\n";
                    continue;
                }
                if(piece[cur.fi][cur.se].ally(piece[x_board][y_board])){
                    cerr << "Can't take the same side piece!\n";
                    continue;
                }

                dMove.push_back(Movement(cur, make_pair(x_board, y_board),
                                        piece[cur.fi][cur.se].getVal(), piece[x_board][y_board].isPiece()));
                board.setValue(x_board, y_board, board.getValue(cur.fi, cur.se));
                board.setValue(cur.fi, cur.se, -1);

                add_numMove();
            }
            else {
                if (piece[x_board][y_board].getSide() == currentSide) {
                    hold_piece = true;
                    cur = make_pair(x_board, y_board);
                }
            }
        }
    }
}


//draw the board after each move
void Match::draw(){
    //Clear screen
    SDL_RenderClear( Game::instance().m_Renderer );

    //Render texture to screen
    board.draw();
    {//draw the squares
        if(!dMove.empty()){
            addColorSquare(dMove.back().from);
            addColorSquare(dMove.back().to);
        }
        if(hold_piece) addColorSquare(cur);
    }
    if(hold_piece){//draw the movable square
        Uint64 temp = movable[cur.fi][cur.se];
        short _ = -1;
        FU(i, 0, 8) FU(j, 0, 8){
            ++_;
            if(!ONBIT(temp, _)) continue;
            if(piece[i][j].getVal() == -1) dot1.draw(square[i][j]);
            else dot2.draw(square[i][j]);

        }
    }
    FU(i, 0, 8) FU(j, 0, 8){
        piece[i][j].setVal(board.getValue(i, j));
        piece[i][j].draw(square[i][j]);
    }

    //Update screen
    SDL_RenderPresent( Game::instance().m_Renderer );
    SDL_Delay(20);
}

//cal the possible move for each side
void Match::calculate(){
//    for(int i=1;i)
}

//go to a new move
void Match::add_numMove(){
    cerr << numMove << endl;
    ++numMove;
    if(numMove & 1){
        ++numTurn;
        cerr << "Turns no. " << numTurn << endl;
    }
    currentSide ^= 1;
    if(currentSide == WHITE) cerr << "WHITE moves\n";
    else cerr << "BLACK moves\n";
}

//add color to a specific square
void Match::addColorSquare(pa X){
    SDL_SetRenderDrawColor(Game::instance().m_Renderer, 0xF6, 0xF6, 0x69, 0x8F);
    SDL_RenderFillRect(Game::instance().m_Renderer, &square[X.fi][X.se]);
}
